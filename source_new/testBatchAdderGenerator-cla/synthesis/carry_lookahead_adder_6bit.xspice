* XSpice netlist created from SPICE and liberty sources by spi2xspice.py
*SPICE netlist created from BLIF module carry_lookahead_adder_6bit by blif2BSpice
.subckt carry_lookahead_adder_6bit a_vdd a_gnd a_i_add1_0_ a_i_add1_1_ a_i_add1_2_ a_i_add1_3_ a_i_add1_4_ a_i_add1_5_ a_i_add2_0_ a_i_add2_1_ a_i_add2_2_ a_i_add2_3_ a_i_add2_4_ a_i_add2_5_ a_o_result_0_ a_o_result_1_ a_o_result_2_ a_o_result_3_ a_o_result_4_ a_o_result_5_ a_o_result_6_
ANOR2X1_1 [i_add2_5_ i_add1_5_] _24_ d_lut_NOR2X1
AAND2X2_1 [i_add2_5_ i_add1_5_] _25_ d_lut_AND2X2
AOAI21X1_1 [_24_ _25_ w_C_5_] _26_ d_lut_OAI21X1
ANAND2X1_1 [_26_ _30_] _16__5_ d_lut_NAND2X1
AINVX1_1 [gnd] _34_ d_lut_INVX1
AOR2X2_1 [i_add2_0_ i_add1_0_] _35_ d_lut_OR2X2
ANAND2X1_2 [i_add2_0_ i_add1_0_] _36_ d_lut_NAND2X1
ANAND3X1_1 [_34_ _36_ _35_] _37_ d_lut_NAND3X1
ANOR2X1_2 [i_add2_0_ i_add1_0_] _31_ d_lut_NOR2X1
AAND2X2_2 [i_add2_0_ i_add1_0_] _32_ d_lut_AND2X2
AOAI21X1_2 [_31_ _32_ gnd] _33_ d_lut_OAI21X1
ANAND2X1_3 [_33_ _37_] _16__0_ d_lut_NAND2X1
AINVX1_2 [w_C_1_] _41_ d_lut_INVX1
AOR2X2_2 [i_add2_1_ i_add1_1_] _42_ d_lut_OR2X2
ANAND2X1_4 [i_add2_1_ i_add1_1_] _43_ d_lut_NAND2X1
ANAND3X1_2 [_41_ _43_ _42_] _44_ d_lut_NAND3X1
ANOR2X1_3 [i_add2_1_ i_add1_1_] _38_ d_lut_NOR2X1
AAND2X2_3 [i_add2_1_ i_add1_1_] _39_ d_lut_AND2X2
AOAI21X1_3 [_38_ _39_ w_C_1_] _40_ d_lut_OAI21X1
ANAND2X1_5 [_40_ _44_] _16__1_ d_lut_NAND2X1
AINVX1_3 [w_C_2_] _48_ d_lut_INVX1
AOR2X2_3 [i_add2_2_ i_add1_2_] _49_ d_lut_OR2X2
ANAND2X1_6 [i_add2_2_ i_add1_2_] _50_ d_lut_NAND2X1
ANAND3X1_3 [_48_ _50_ _49_] _51_ d_lut_NAND3X1
ANOR2X1_4 [i_add2_2_ i_add1_2_] _45_ d_lut_NOR2X1
AAND2X2_4 [i_add2_2_ i_add1_2_] _46_ d_lut_AND2X2
AOAI21X1_4 [_45_ _46_ w_C_2_] _47_ d_lut_OAI21X1
ANAND2X1_7 [_47_ _51_] _16__2_ d_lut_NAND2X1
AINVX1_4 [w_C_3_] _55_ d_lut_INVX1
AOR2X2_4 [i_add2_3_ i_add1_3_] _56_ d_lut_OR2X2
ANAND2X1_8 [i_add2_3_ i_add1_3_] _57_ d_lut_NAND2X1
ANAND3X1_4 [_55_ _57_ _56_] _58_ d_lut_NAND3X1
ANOR2X1_5 [i_add2_3_ i_add1_3_] _52_ d_lut_NOR2X1
AAND2X2_5 [i_add2_3_ i_add1_3_] _53_ d_lut_AND2X2
AOAI21X1_5 [_52_ _53_ w_C_3_] _54_ d_lut_OAI21X1
ANAND2X1_9 [_54_ _58_] _16__3_ d_lut_NAND2X1
ANOR2X1_6 [i_add2_1_ i_add1_1_] _0_ d_lut_NOR2X1
AAOI22X1_1 [i_add2_1_ i_add1_1_ i_add2_0_ i_add1_0_] _1_ d_lut_AOI22X1
ANOR2X1_7 [_0_ _1_] w_C_2_ d_lut_NOR2X1
ANAND2X1_10 [i_add2_2_ i_add1_2_] _2_ d_lut_NAND2X1
AOAI21X1_6 [_0_ _1_ _2_] _3_ d_lut_OAI21X1
AOAI21X1_7 [i_add2_2_ i_add1_2_ _3_] _4_ d_lut_OAI21X1
AINVX1_5 [_4_] w_C_3_ d_lut_INVX1
ANAND2X1_11 [i_add2_3_ i_add1_3_] _5_ d_lut_NAND2X1
AOR2X2_5 [i_add2_2_ i_add1_2_] _6_ d_lut_OR2X2
AOR2X2_6 [i_add2_3_ i_add1_3_] _7_ d_lut_OR2X2
ANAND3X1_5 [_6_ _7_ _3_] _8_ d_lut_NAND3X1
ANAND2X1_12 [_5_ _8_] w_C_4_ d_lut_NAND2X1
AOR2X2_7 [i_add2_4_ i_add1_4_] _9_ d_lut_OR2X2
ANAND2X1_13 [i_add2_4_ i_add1_4_] _10_ d_lut_NAND2X1
ANAND3X1_6 [_5_ _10_ _8_] _11_ d_lut_NAND3X1
AAND2X2_6 [_11_ _9_] w_C_5_ d_lut_AND2X2
ANAND2X1_14 [i_add2_5_ i_add1_5_] _12_ d_lut_NAND2X1
AOR2X2_8 [i_add2_5_ i_add1_5_] _13_ d_lut_OR2X2
ANAND3X1_7 [_9_ _13_ _11_] _14_ d_lut_NAND3X1
ANAND2X1_15 [_12_ _14_] w_C_6_ d_lut_NAND2X1
ANAND2X1_16 [i_add2_0_ i_add1_0_] _15_ d_lut_NAND2X1
AINVX1_6 [_15_] w_C_1_ d_lut_INVX1
ABUFX2_1 [_16__0_] o_result_0_ d_lut_BUFX2
ABUFX2_2 [_16__1_] o_result_1_ d_lut_BUFX2
ABUFX2_3 [_16__2_] o_result_2_ d_lut_BUFX2
ABUFX2_4 [_16__3_] o_result_3_ d_lut_BUFX2
ABUFX2_5 [_16__4_] o_result_4_ d_lut_BUFX2
ABUFX2_6 [_16__5_] o_result_5_ d_lut_BUFX2
ABUFX2_7 [w_C_6_] o_result_6_ d_lut_BUFX2
AINVX1_7 [w_C_4_] _20_ d_lut_INVX1
AOR2X2_9 [i_add2_4_ i_add1_4_] _21_ d_lut_OR2X2
ANAND2X1_17 [i_add2_4_ i_add1_4_] _22_ d_lut_NAND2X1
ANAND3X1_8 [_20_ _22_ _21_] _23_ d_lut_NAND3X1
ANOR2X1_8 [i_add2_4_ i_add1_4_] _17_ d_lut_NOR2X1
AAND2X2_7 [i_add2_4_ i_add1_4_] _18_ d_lut_AND2X2
AOAI21X1_8 [_17_ _18_ w_C_4_] _19_ d_lut_OAI21X1
ANAND2X1_18 [_19_ _23_] _16__4_ d_lut_NAND2X1
AINVX1_8 [w_C_5_] _27_ d_lut_INVX1
AOR2X2_10 [i_add2_5_ i_add1_5_] _28_ d_lut_OR2X2
ANAND2X1_19 [i_add2_5_ i_add1_5_] _29_ d_lut_NAND2X1
ANAND3X1_9 [_27_ _29_ _28_] _30_ d_lut_NAND3X1
ABUFX2_8 [w_C_6_] _16__6_ d_lut_BUFX2
ABUFX2_9 [gnd] w_C_0_ d_lut_BUFX2

.model todig_3v3 adc_bridge(in_high=2.1999999999999997 in_low=1.0999999999999999 rise_delay=10n fall_delay=10n)
.model toana_3v3 dac_bridge(out_high=3.3 out_low=0)

.model ddflop d_dff(ic=0 rise_delay=1n fall_delay=1n)
.model dzero d_pulldown(load=1p)
.model done d_pullup(load=1p)

AA2D1 [a_vdd] [vdd] todig_3v3
AA2D2 [a_gnd] [gnd] todig_3v3
AA2D3 [a_i_add1_0_] [i_add1_0_] todig_3v3
AA2D4 [a_i_add1_1_] [i_add1_1_] todig_3v3
AA2D5 [a_i_add1_2_] [i_add1_2_] todig_3v3
AA2D6 [a_i_add1_3_] [i_add1_3_] todig_3v3
AA2D7 [a_i_add1_4_] [i_add1_4_] todig_3v3
AA2D8 [a_i_add1_5_] [i_add1_5_] todig_3v3
AA2D9 [a_i_add2_0_] [i_add2_0_] todig_3v3
AA2D10 [a_i_add2_1_] [i_add2_1_] todig_3v3
AA2D11 [a_i_add2_2_] [i_add2_2_] todig_3v3
AA2D12 [a_i_add2_3_] [i_add2_3_] todig_3v3
AA2D13 [a_i_add2_4_] [i_add2_4_] todig_3v3
AA2D14 [a_i_add2_5_] [i_add2_5_] todig_3v3
AD2A1 [o_result_0_] [a_o_result_0_] toana_3v3
AD2A2 [o_result_1_] [a_o_result_1_] toana_3v3
AD2A3 [o_result_2_] [a_o_result_2_] toana_3v3
AD2A4 [o_result_3_] [a_o_result_3_] toana_3v3
AD2A5 [o_result_4_] [a_o_result_4_] toana_3v3
AD2A6 [o_result_5_] [a_o_result_5_] toana_3v3
AD2A7 [o_result_6_] [a_o_result_6_] toana_3v3

.ends carry_lookahead_adder_6bit
 

* NOR2X1 (!(A+B))
.model d_lut_NOR2X1 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "1000")
* AND2X2 (A B)
.model d_lut_AND2X2 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "0001")
* OAI21X1 (!((A+B) C))
.model d_lut_OAI21X1 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "11111000")
* NAND2X1 (!(A B))
.model d_lut_NAND2X1 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "1110")
* INVX1 (!A)
.model d_lut_INVX1 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "10")
* OR2X2 (A+B)
.model d_lut_OR2X2 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "0111")
* NAND3X1 (!((A B) C))
.model d_lut_NAND3X1 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "11111110")
* AOI22X1 (!((A B)+(C D)))
.model d_lut_AOI22X1 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "1110111011100000")
* BUFX2 A
.model d_lut_BUFX2 d_lut (rise_delay=1n fall_delay=1n input_load=1p
+ table_values "01")
.end
